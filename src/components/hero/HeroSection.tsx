'use client';

import React, { useState, useCallback } from 'react';
import { useRouter } from 'next/navigation';

const VIETNAM_PROVINCES = [
  'An Giang', 'B√† R·ªãa - V≈©ng T√†u', 'B·∫Øc Giang', 'B·∫Øc K·∫°n', 'B·∫°c Li√™u',
  'B·∫Øc Ninh', 'B·∫øn Tre', 'B√¨nh ƒê·ªãnh', 'B√¨nh D∆∞∆°ng', 'B√¨nh Ph∆∞·ªõc',
  'B√¨nh Thu·∫≠n', 'C√† Mau', 'Cao B·∫±ng', 'ƒê·∫Øk L·∫Øk', 'ƒê·∫Øk N√¥ng',
  'ƒêi·ªán Bi√™n', 'ƒê·ªìng Nai', 'ƒê·ªìng Th√°p', 'Gia Lai', 'H√† Giang',
  'H√† Nam', 'H√† Tƒ©nh', 'H·∫£i D∆∞∆°ng', 'H·∫≠u Giang', 'H√≤a B√¨nh',
  'H∆∞ng Y√™n', 'Kh√°nh H√≤a', 'Ki√™n Giang', 'Kon Tum', 'Lai Ch√¢u',
  'L√¢m ƒê·ªìng', 'L·∫°ng S∆°n', 'L√†o Cai', 'Long An', 'Nam ƒê·ªãnh',
  'Ngh·ªá An', 'Ninh B√¨nh', 'Ninh Thu·∫≠n', 'Ph√∫ Th·ªç', 'Qu·∫£ng B√¨nh',
  'Qu·∫£ng Nam', 'Qu·∫£ng Ng√£i', 'Qu·∫£ng Ninh', 'Qu·∫£ng Tr·ªã', 'S√≥c TrƒÉng',
  'S∆°n La', 'T√¢y Ninh', 'Th√°i B√¨nh', 'Th√°i Nguy√™n', 'Thanh H√≥a',
  'Th·ª´a Thi√™n Hu·∫ø', 'Ti·ªÅn Giang', 'Tr√† Vinh', 'Tuy√™n Quang',
  'Vƒ©nh Long', 'Vƒ©nh Ph√∫c', 'Y√™n B√°i', 'Ph√∫ Y√™n', 'C·∫ßn Th∆°',
  'ƒê√† N·∫µng', 'H·∫£i Ph√≤ng', 'H√† N·ªôi', 'TP H·ªì Ch√≠ Minh'
];

const FNB_JOB_CATEGORIES = [
  'Ph·ª•c v·ª• nh√† h√†ng',
  'Pha ch·∫ø',
  'ƒê·∫ßu b·∫øp',
  'Qu·∫£n l√Ω nh√† h√†ng',
  'Qu·∫£n l√Ω kh√°ch s·∫°n',
  'L·ªÖ t√¢n',
  'Nh√¢n vi√™n pha ch·∫ø',
  'Nh√¢n vi√™n ph·ª•c v·ª•',
  'Nh√¢n vi√™n pha ch·∫ø tr√† s·ªØa',
  'Nh√¢n vi√™n pha ch·∫ø c√† ph√™',
  'Nh√¢n vi√™n thu ng√¢n',
  'Nh√¢n vi√™n ph·ª•c v·ª• b√†n',
  'Nh√¢n vi√™n pha ch·∫ø cocktail',
  'Nh√¢n vi√™n pha ch·∫ø tr√†',
  'Qu·∫£n l√Ω qu√°n c√† ph√™',
  'Qu·∫£n l√Ω nh√† h√†ng kh√°ch s·∫°n',
  'Nh√¢n vi√™n pha ch·∫ø tr√† s·ªØa tr√¢n ch√¢u',
  'Nh√¢n vi√™n pha ch·∫ø tr√† s·ªØa',
  'Nh√¢n vi√™n pha ch·∫ø tr√† s·ªØa ƒê√†i Loan',
  'Nh√¢n vi√™n pha ch·∫ø tr√† s·ªØa H·ªìng K√¥ng'
];

interface HeroSectionProps {
  provinces?: string[];
  jobTitles?: string[];
  jobCategories?: string[];
}

export default function HeroSection({
  provinces = VIETNAM_PROVINCES,
  jobTitles = [],
  jobCategories = FNB_JOB_CATEGORIES
}: HeroSectionProps) {
  const [jobTitle, setJobTitle] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [selectedProvince, setSelectedProvince] = useState('');
  const [searching, setSearching] = useState(false);
  const [error, setError] = useState('');
  const router = useRouter();

  const handleSearch = useCallback(
    (e: React.FormEvent) => {
      e.preventDefault();

      // Reset error
      setError('');

      // Validate at least one field is filled
      if (!jobTitle && !selectedCategory && !selectedProvince) {
        setError('Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt ti√™u ch√≠ t√¨m ki·∫øm');
        return;
      }

      // Validate job title length if provided
      if (jobTitle && jobTitle.length < 2) {
        setError('T·ª´ kh√≥a t√¨m ki·∫øm ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
        return;
      }

      setSearching(true);

      // Build search params
      const params = new URLSearchParams();
      if (jobTitle) params.append('search', jobTitle);
      if (selectedCategory) params.append('category', selectedCategory);
      if (selectedProvince) params.append('location', selectedProvince);

      // Navigate to search page
      const navigateAndReset = async () => {
        try {
          await router.push(`/search?${params.toString()}`);
          // Reset form after successful navigation
          setJobTitle('');
          setSelectedCategory('');
          setSelectedProvince('');
        } catch (error) {
          console.error('Navigation error:', error);
          setError('ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
          setSearching(false);
        }
      };

      void navigateAndReset();
    },
    [jobTitle, selectedCategory, selectedProvince, router]
  );

  return (
    <div
      className="w-full relative border-y-2 border-blue-700"
      style={{
        backgroundImage: "url('/img/dn.jpg')",
        backgroundSize: "cover",
        backgroundPosition: "center",
      }}
    >
      {/* Overlay for better text visibility */}
      <div className="absolute inset-0 bg-blue-700/70"></div>

      <div className="relative z-10">
        {/* Animated text */}
        <div className="w-full overflow-hidden h-20 sm:h-24 flex items-center mt-10">
          <p className="whitespace-nowrap animate-marquee text-xl sm:text-2xl font-semibold text-white tracking-wide">
            üöÄ T√¨m vi·ªác d·ªÖ d√†ng, ·ª©ng tuy·ªÉn ch·ªâ v·ªõi 1 c√∫ click! &nbsp;&nbsp;&nbsp; ‚Ä¢ &nbsp;&nbsp;&nbsp;
            üíº K·∫øt n·ªëi nhanh v·ªõi nh√† tuy·ªÉn d·ª•ng uy t√≠n! &nbsp;&nbsp;&nbsp; ‚Ä¢ &nbsp;&nbsp;&nbsp;
            üìå Vi·ªác l√†m m∆° ∆∞·ªõc kh√¥ng c√≤n xa ‚Äì Kh√°m ph√° ngay!
          </p>
        </div>

        {/* Search Form */}
        <form onSubmit={handleSearch} className="w-full flex justify-center py-6 px-4">
          <div className="bg-white/90 backdrop-blur-md rounded-lg shadow-lg p-4 flex flex-col sm:flex-row gap-3 w-full max-w-6xl">
            {/* Job Title Input */}
            <div className="relative flex-1">
              <div className="flex items-center bg-white border rounded-md px-3 py-2 h-full">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5 text-gray-400 mr-2 flex-shrink-0"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-4.35-4.35m0 0A7.5 7.5 0 1110.5 3a7.5 7.5 0 016.15 13.65z" />
                </svg>
                <input
                  type="text"
                  value={jobTitle}
                  onChange={(e) => setJobTitle(e.target.value)}
                  placeholder="T√™n c√¥ng vi·ªác, v·ªã tr√≠ ·ª©ng tuy·ªÉn"
                  className="w-full outline-none text-gray-700 bg-transparent"
                  list="job-title-list"
                />
                <datalist id="job-title-list">
                  {jobTitles.map((title) => (
                    <option key={title} value={title} />
                  ))}
                </datalist>
              </div>
            </div>

            {/* Job Category Select */}
            <div className="relative flex-1">
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="w-full h-full px-3 py-2 border rounded-md text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none bg-white"
              >
                <option
                  value=""
                  className="font-semibold text-blue-600 bg-blue-50"
                >
                  T·∫•t c·∫£ ng√†nh ngh·ªÅ
                </option>
                <div className="border-t border-gray-200 my-1"></div>
                {jobCategories.map((category) => (
                  <option
                    key={category}
                    value={category}
                    className="hover:bg-blue-50"
                  >
                    {category}
                  </option>
                ))}
              </select>
            </div>

            {/* Location Select */}
            <div className="relative flex-1">
              <select
                value={selectedProvince}
                onChange={(e) => setSelectedProvince(e.target.value)}
                className="w-full h-full px-3 py-2 border rounded-md text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none bg-white"
              >
                <option
                  value=""
                  className="font-semibold text-blue-600 bg-blue-50"
                >
                  T·∫•t c·∫£ ƒë·ªãa ƒëi·ªÉm
                </option>
                <div className="border-t border-gray-200 my-1"></div>
                {provinces.map((province) => (
                  <option
                    key={province}
                    value={province}
                    className="hover:bg-blue-50"
                  >
                    {province}
                  </option>
                ))}
              </select>
            </div>

            {/* Search Button */}
            <button
              type="submit"
              disabled={searching}
              className={`px-6 py-2.5 rounded-md font-semibold text-white transition-all flex items-center justify-center min-w-[120px] ${searching
                  ? 'bg-blue-400 cursor-not-allowed'
                  : 'bg-blue-500 hover:bg-blue-600 hover:shadow-md transform hover:scale-105'
                }`}
            >
              {searching ? (
                <>
                  <svg
                    className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <circle
                      className="opacity-25"
                      cx="12"
                      cy="12"
                      r="10"
                      stroke="currentColor"
                      strokeWidth="4"
                    ></circle>
                    <path
                      className="opacity-75"
                      fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    ></path>
                  </svg>
                  ƒêang t√¨m...
                </>
              ) : (
                'T√¨m vi·ªác ngay'
              )}
            </button>

          </div>
        </form>

        {/* Error Message */}
        {error && (
          <div className="text-center px-4">
            <div className="inline-block bg-red-50 text-red-700 px-4 py-2 rounded-md text-sm">
              {error}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
