import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname;

  // Ch·ªâ x·ª≠ l√Ω c√°c route admin (UI). API admin t·ª± x·ª≠ l√Ω x√°c th·ª±c
  if (pathname.startsWith('/api/admin/')) {
    return NextResponse.next();
  }

  // B·∫£o v·ªá t·∫•t c·∫£ route admin
  if (pathname === '/admin' || pathname.startsWith('/admin/')) {
    const hasAdminToken = request.cookies.get('admin-token');
    
    // Log ƒë·ªÉ debug tr√™n production
    console.log(`üîê [MIDDLEWARE] ${pathname} - Token exists: ${!!hasAdminToken}`);

    // N·∫øu ch∆∞a c√≥ token v√† kh√¥ng ph·∫£i trang login -> chuy·ªÉn t·ªõi /admin/login
    if (!hasAdminToken && pathname !== '/admin/login') {
      console.log(`üîí [MIDDLEWARE] Redirecting to login: ${pathname}`);
      const loginUrl = request.nextUrl.clone();
      loginUrl.pathname = '/admin/login';
      loginUrl.searchParams.set('redirect', pathname + request.nextUrl.search);
      return NextResponse.redirect(loginUrl);
    }

    // N·∫øu ƒë√£ c√≥ token m√† l·∫°i v√†o /admin/login -> chuy·ªÉn v·ªÅ /admin
    if (hasAdminToken && pathname === '/admin/login') {
      console.log(`‚úÖ [MIDDLEWARE] Already logged in, redirecting to /admin`);
      const adminUrl = request.nextUrl.clone();
      adminUrl.pathname = '/admin';
      return NextResponse.redirect(adminUrl);
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: ['/admin', '/admin/:path*'],
};